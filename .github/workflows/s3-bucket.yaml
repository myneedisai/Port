name: Provision S3 Bucket

on:
  workflow_dispatch:
    inputs:
      bucket_name:
        description: "S3 Bucket Name"
        required: true
        type: string
      region:
        description: "AWS Region"
        required: true
        type: string
      acl:
        description: "S3 ACL (e.g., private, public-read)"
        required: true
        type: string
      port_context:
        required: true
        description: "Includes blueprint, runId."
        type: string

jobs:
  provision-s3:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log starting of S3 Bucket creation
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ fromJson(inputs.port_context).run_id }}
          logMessage: "About to create S3 bucket ${{ github.event.inputs.s3_bucket_name }}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: '${{ secrets.TF_USER_AWS_KEY }}'
          aws-secret-access-key: '${{ secrets.TF_USER_AWS_SECRET }}'
          aws-region: '${{ github.event.inputs.s3_region }}'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform Apply
        id: apply
        env:
          TF_VAR_s3_bucket_name: "${{ github.event.inputs.s3_bucket_name }}"
          TF_VAR_s3_acl: "${{ github.event.inputs.s3_acl }}"
          TF_VAR_aws_region: "${{ github.event.inputs.s3_region }}"
        run: |
          cd S3_Create
          terraform init
          terraform validate
          terraform plan
          terraform apply -auto-approve

      - name: Set Outputs
        id: set_outputs
        run: |
          cd S3_Create
          echo "bucket_name=$(terraform output -raw bucket_name)" >> $GITHUB_ENV
          echo "bucket_arn=$(terraform output -raw bucket_arn)" >> $GITHUB_ENV
          echo "bucket_domain=$(terraform output -raw bucket_domain_name)" >> $GITHUB_ENV

      - name: Create a log message
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ fromJson(inputs.port_context).run_id }}
          logMessage: "S3 Bucket created successfully"

      - name: Report Created Bucket to Port
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ fromJson(inputs.port_context).run_id }}
          logMessage: "Upserting created S3 Bucket to Port"
          
      - name: UPSERT S3 Bucket Entity
        uses: port-labs/port-github-action@v1
        with:
          identifier: "${{ steps.set_outputs.outputs.bucket_name }}"
          title: "${{ github.event.inputs.s3_bucket_name }}"
          blueprint: ${{ fromJson(inputs.port_context).blueprint }}
          properties: |-
            {
              "bucket_name": "${{ env.bucket_name }}",
              "bucket_arn": "${{ env.bucket_arn }}",
              "bucket_domain": "${{ env.bucket_domain }}"
            }
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: UPSERT
          runId: ${{ fromJson(inputs.port_context).run_id }}

      - name: Log After Upserting Entity
        uses: port-labs/port-github-action@v1
        with:
          clientId: ${{ secrets.PORT_CLIENT_ID }}
          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}
          baseUrl: https://api.getport.io
          operation: PATCH_RUN
          runId: ${{ fromJson(inputs.port_context).run_id }}
          logMessage: "Entity upserting was successful"
